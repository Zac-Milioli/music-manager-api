name: Continuous Integration

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

  linter:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run pylint
      run: |
        pylint * --output-format=parseable --ignore=requirements.txt,__pycache__,.pytest_cache,README.md,LICENSE,ci.yml --disable=E1102,R0903 > pylint-report.txt || true

    - name: Upload pylint report
      uses: actions/upload-artifact@v4
      with:
        name: pylint-report
        path: pylint-report.txt

    - name: Yield situation
      run: cat pylint-report.txt

    - name: Check pylint score
      run: |
        pylint_score=$(grep "Your code has been rated at" pylint-report.txt | awk '{print $7}' | cut -d'/' -f1)
        echo "Pylint score: $pylint_score"
        if (( $(echo "$pylint_score < 7.00" | bc -l) )); then
          echo "Pylint score is below 7.00"
          exit 1
        fi

  delivery:
      runs-on: ubuntu-latest
      needs: [ build, linter ]
      if: ${{ success() }}
      steps:
        - uses: actions/checkout@v4
          with:
            token: ${{ secrets.CI_MANAGER_SECRET }}
            fetch-depth: 0

        - name: Set up Git
          run: |
            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Actions"

        - name: Fetch all branches
          run: git fetch --all
        
        - name: Checkout and merge
          run: |
            git checkout master
            git merge origin/develop --allow-unrelated-histories --no-edit
            git push origin master